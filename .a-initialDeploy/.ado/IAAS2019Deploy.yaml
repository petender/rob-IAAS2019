name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)-$(RunName)
 
trigger: none
 
pr: none

parameters:
- name: MTTAlias
  type: string
  default: petender
- name: azureSubscription
  type: string
  default: MTTDemoDeploySC-petender
- name: Location
  type: string
  default: eastus
- name: Email
  default: petender@microsoft.com

variables:
- group: testYAMLGroup
- name: RunName
  value: "${{ parameters.MTTAlias }}"
- name: RGName
  value: "MTTDDRG-IAAS"
- name: MTTAliasVar
  value: "${{ parameters.MTTAlias }}"
- name: pipelineName
  value: $(Build.DefinitionName)
- name: recipientEmail
  value: "${{parameters.Email}}" 

stages :        
  - stage: Infra
    jobs:
    - job: Deploy
      pool:
        vmImage: ubuntu-latest
      steps:
      - checkout: self

      - task: AzurePowerShell@5
        displayName: 'Email - Deployment Kicked Off'
        inputs:
          azureSubscription:  'MTTDemoDeploySC-petender' #subscription to connect to the LogicApp
          resourceGroupName: 'ATTDemoDeployRG' #resource group where the LogicApp is deployed
          azurePowerShellVersion: 'LatestVersion' #required to use the latest version of Azure PowerShell
          ScriptType: 'filePath'
          ScriptPath: $(System.DefaultWorkingDirectory)/Email/.ado/job_started_email.ps1  #can't handle indentation for @""@ in PS Inline
          ScriptArguments: '-BuildDefinitionName:$(pipelineName) -To:$(recipientEmail)'
          # the ScriptArguments is used to pass the parameters to the PS script

      - task: PowerShell@2
        displayName: 'Generate Random String for Naming Resources'
        name: genRandomString
        inputs:
          targetType: 'inline'
          script: |
            # Your PowerShell script here
            
            #generate random string for naming resources using lowercase and digits only
            do {
                $randomName = -join ((97..122) + (48..57) | Get-Random -Count 12 | % {[char]$_})
                } while ($randomName -notmatch '^[a-zA-Z][a-zA-Z0-9-]{6,50}[a-zA-Z0-9]$')
                
            Write-Host "##vso[task.setvariable variable=genrandom;]$randomName"
            Write-Host $genrandom

      - task: AzureCLI@2
        displayName: 'Create RG and connect to Artifact Storage Account'
        inputs:
            azureSubscription: '${{ parameters.azureSubscription }}'
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              # this will create Azure resource group
              az group create --location ${{ parameters.Location }} --name '$(RGName)' --tags "source=MTTDemoDeploy"
              
              Echo "Connecting to Artifact Storage Account..."
                           
              export stoaccname=attdemodeploystoacc 
              export stoaccRGname=ATTDemoDeployRG
              echo $stoaccname
              echo $stoaccRGname
                    
              Echo "listing storage keys..."
              stoacckey=$(az storage account keys list -g $stoaccRGname -n $stoaccname --query [0].value -o tsv)
              

              echo "##vso[task.setvariable variable=stoaccname]$stoaccname"

      - task: PowerShell@2
        displayName: 'Generate Complex Password'
        inputs:
          targetType: 'inline'
          script: |
            # Your PowerShell script here
            
            #generate strong password with PowerShell
            $adminPassword = -join ((65..90) + (97..122) + (48..57) + (35..47) + (58..64) | Get-Random -Count 16 | % {[char]$_})

            Write-Host "##vso[task.setvariable variable=genpassword;]$adminPassword"
            Write-Host $genpassword

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'ARM Template deployment: Resource Group scope'
        inputs:
            azureResourceManagerConnection: '${{ parameters.azureSubscription }}'
            #subscriptionId: '$(SubId)'
            resourceGroupName: '$(RGName)'
            location: '${{ parameters.Location }}'
            csmFile: 'IAAS2019/.azure/azuredeploy.json'
            #csmParametersFile: '$(System.DefaultWorkingDirectory)/_FastCarCaseDev.ARM/FastCar_VM_IAAS_2019/azuredeploy.parameters.json'
            overrideParameters: '-vmstorageType "Premium_LRS" -WebVMName "WebVM" -WebVMAdminUserName "labadmin" -WebVMAdminPassword $(genPassword) -WebVMWindowsOSVersion 2019-Datacenter -WebPublicIPDnsName $(genrandom)webvm -_artifactsLocation https://attdemodeploystoacc.blob.core.windows.net/deployartifacts/deploytemplateartifacts/IAAS2019 -_artifactsLocationSasToken "" -WebPackage "https://attdemodeploystoacc.blob.core.windows.net/deployartifacts/eshoponweb_iissource.zip" -SQLVMName "SQLVM" -SQLVMAdminUserName "labadmin" -SQLVMAdminPassword $(genPassword) -SQLVMSKU "Web"'

      - task: AzurePowerShell@5
        displayName: 'Email - Deployment Completed'
        inputs:
          azureSubscription:  'MTTDemoDeploySC-petender' #subscription to connect to the LogicApp
          resourceGroupName: 'ATTDemoDeployRG' #resource group where the LogicApp is deployed
          azurePowerShellVersion: 'LatestVersion' #required to use the latest version of Azure PowerShell
          ScriptType: 'filePath'
          ScriptPath: $(System.DefaultWorkingDirectory)/IAAS2019/.ado/iaas2019_completed_email.ps1  #can't handle indentation for @""@ in PS Inline
          ScriptArguments: '-BuildDefinitionName:$(pipelineName) -To:$(recipientEmail) -adminUsername:labadmin -location:${{ parameters.Location }} -adminPassword:"$(genPassword)"' #needs quotes because split characters
          # the ScriptArguments is used to pass the parameters to the PS script, and should contain all the parameters used by the Azure Resources, which
          # the MTT should know about (e.g. ACRName, IP-address, Passwords,...)

    - job: DeleteResourcesOnFailure
      dependsOn: Deploy
      condition: failed()  # This job runs only when the previous job fails
      steps:
      - template: ../../Email/emailtemplates/delete_resources_onfailure-steps.yml # the ../.. is used to go back to the root of the repo, and then go to the Email folder
        parameters:
          azureSubscription: ${{parameters.azureSubscription}}
          RGName: ${{variables.RGName}}
          pipelineName: ${{variables.pipelineName}}
          recipientEmail: ${{variables.recipientEmail}}